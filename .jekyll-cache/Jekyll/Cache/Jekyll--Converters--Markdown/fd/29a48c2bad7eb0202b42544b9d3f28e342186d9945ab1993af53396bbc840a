I"EQ<p>这篇学习下钱包备份和恢复相关的知识。</p>

<p>本人知识有限，如有错误和疏漏，请务必指正，多谢。</p>

<h2 id="前言">前言</h2>

<p>之前<a href="http://cooli7wa.com//2018/07/28/%E6%AF%94%E7%89%B9%E5%B8%81-%E5%88%86%E5%B1%82%E7%A1%AE%E5%AE%9A%E6%80%A7%E9%92%B1%E5%8C%85/"> HD 钱包的文章</a>介绍过钱包密钥的派生过程，主密钥（包括链码）是由熵、助记词、种子一步步推导出来的，而子密钥都是根据主密钥<strong>确定性</strong>派生出来的，所谓确定性就是说只要提供子密钥的路径，无论派生多少次，派生出来的密钥都是一样的。</p>

<p>那么其实对于用户来说，只要保留好熵、助记词、种子、主密钥（包括链码）中的任何一样都可以恢复出自己的钱包。但钱包一般只会提供助记词或主密钥给客户来备份，助记词要好过主密钥，有两点：</p>

<ul>
  <li>助记词顾名思义，可以方便用户记忆，一般是 12 个单词，抄写到纸上之类的，也比较不容易出错。而主密钥（包括链码）就是 64 字节的不直观的数据而已。</li>
  <li>助记词可以推导出所有其他的要素，比如熵、种子、主密钥，但是主密钥无法推导出其他要素，因为主密钥是单向 hash 得到的，虽然不影响推导子密钥（也就不影响使用钱包），但是永远无法知道比如助记词是什么，不方便。</li>
</ul>

<p>这里就有一个困惑很久的问题。</p>

<p>我们知道 HD 钱包是分层的，而且是可以无限派生的，我们每个人都有很多的密钥，虽然密钥是确定性的，但是如果只提供助记词或主密钥，<strong>钱包是如何知道，我们之前一共派生并使用过多少密钥呢</strong>？毕竟得知道这些，才能算出我们的资产。</p>

<p>另外一个问题是，钱包一般还提供了备份到文件的功能，这种之前说的有什么区别，<strong>到底备份了哪些东西</strong>？</p>

<p>看完下面的介绍，相信大家跟我一样，对这两个问题，就会有比较清晰的解答。</p>

<h2 id="正文">正文</h2>

<p>这里会粘贴一些代码，这些代码来自<a href="https://github.com/bitcoinj/bitcoinj">bitcoinj</a>，是一个 java 实现的比特币协议代码。</p>

<h3 id="备份钱包到文件到底备份些什么">备份钱包到文件到底备份些什么</h3>

<p>其实备份钱包到文件，还是备份了很多东西的，这些东西能够加快恢复钱包的速度。</p>

<p>代码在后面了，主要的备份内容就是下面这些：</p>

<ul>
  <li>网络ID 、钱包描述和版本</li>
  <li>所有本钱包的交易记录</li>
  <li><strong>key 相关内容</strong>，包括：种子、助记词、<strong>所有的</strong>key、对应的<strong>路径</strong>等</li>
  <li>一些脚本，与公钥对应，主要用来从全节点获取交易信息用。</li>
  <li>最后一个块的 hash</li>
  <li>scrypt 参数、Signer、Tags</li>
  <li>key rotation time 信息，与比特币安全相关</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
</pre></td> --><td class="rouge-code"><pre>    <span class="cm">/**
     * Converts the given wallet to the object representation of the protocol buffers. This can be modified, or
     * additional data fields set, before serialization takes place.
     */</span>
    <span class="kd">public</span> <span class="nc">Protos</span><span class="o">.</span><span class="na">Wallet</span> <span class="nf">walletToProto</span><span class="o">(</span><span class="nc">Wallet</span> <span class="n">wallet</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Protos</span><span class="o">.</span><span class="na">Wallet</span><span class="o">.</span><span class="na">Builder</span> <span class="n">walletBuilder</span> <span class="o">=</span> <span class="nc">Protos</span><span class="o">.</span><span class="na">Wallet</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">();</span>
        <span class="n">walletBuilder</span><span class="o">.</span><span class="na">setNetworkIdentifier</span><span class="o">(</span><span class="n">wallet</span><span class="o">.</span><span class="na">getNetworkParameters</span><span class="o">().</span><span class="na">getId</span><span class="o">());</span> <span class="c1">// 网络id</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">wallet</span><span class="o">.</span><span class="na">getDescription</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">walletBuilder</span><span class="o">.</span><span class="na">setDescription</span><span class="o">(</span><span class="n">wallet</span><span class="o">.</span><span class="na">getDescription</span><span class="o">());</span> <span class="c1">// 钱包描述</span>
        <span class="o">}</span>

        <span class="k">for</span> <span class="o">(</span><span class="nc">WalletTransaction</span> <span class="n">wtx</span> <span class="o">:</span> <span class="n">wallet</span><span class="o">.</span><span class="na">getWalletTransactions</span><span class="o">())</span> <span class="o">{</span>
            <span class="nc">Protos</span><span class="o">.</span><span class="na">Transaction</span> <span class="n">txProto</span> <span class="o">=</span> <span class="n">makeTxProto</span><span class="o">(</span><span class="n">wtx</span><span class="o">);</span>
            <span class="n">walletBuilder</span><span class="o">.</span><span class="na">addTransaction</span><span class="o">(</span><span class="n">txProto</span><span class="o">);</span> <span class="c1">// 交易记录</span>
        <span class="o">}</span>

        <span class="n">walletBuilder</span><span class="o">.</span><span class="na">addAllKey</span><span class="o">(</span><span class="n">wallet</span><span class="o">.</span><span class="na">serializeKeyChainGroupToProtobuf</span><span class="o">());</span> <span class="c1">// 所有key相关</span>

        <span class="k">for</span> <span class="o">(</span><span class="nc">Script</span> <span class="n">script</span> <span class="o">:</span> <span class="n">wallet</span><span class="o">.</span><span class="na">getWatchedScripts</span><span class="o">())</span> <span class="o">{</span>
            <span class="nc">Protos</span><span class="o">.</span><span class="na">Script</span> <span class="n">protoScript</span> <span class="o">=</span>
                    <span class="nc">Protos</span><span class="o">.</span><span class="na">Script</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">()</span>
                            <span class="o">.</span><span class="na">setProgram</span><span class="o">(</span><span class="nc">ByteString</span><span class="o">.</span><span class="na">copyFrom</span><span class="o">(</span><span class="n">script</span><span class="o">.</span><span class="na">getProgram</span><span class="o">()))</span>
                            <span class="o">.</span><span class="na">setCreationTimestamp</span><span class="o">(</span><span class="n">script</span><span class="o">.</span><span class="na">getCreationTimeSeconds</span><span class="o">()</span> <span class="o">*</span> <span class="mi">1000</span><span class="o">)</span>
                            <span class="o">.</span><span class="na">build</span><span class="o">();</span>

            <span class="n">walletBuilder</span><span class="o">.</span><span class="na">addWatchedScript</span><span class="o">(</span><span class="n">protoScript</span><span class="o">);</span> <span class="c1">// 脚本</span>
        <span class="o">}</span>

        <span class="c1">// Populate the lastSeenBlockHash field.</span>
        <span class="nc">Sha256Hash</span> <span class="n">lastSeenBlockHash</span> <span class="o">=</span> <span class="n">wallet</span><span class="o">.</span><span class="na">getLastBlockSeenHash</span><span class="o">();</span> <span class="c1">// 最后一块区块信息</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">lastSeenBlockHash</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">walletBuilder</span><span class="o">.</span><span class="na">setLastSeenBlockHash</span><span class="o">(</span><span class="n">hashToByteString</span><span class="o">(</span><span class="n">lastSeenBlockHash</span><span class="o">));</span>
            <span class="n">walletBuilder</span><span class="o">.</span><span class="na">setLastSeenBlockHeight</span><span class="o">(</span><span class="n">wallet</span><span class="o">.</span><span class="na">getLastBlockSeenHeight</span><span class="o">());</span>
        <span class="o">}</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">wallet</span><span class="o">.</span><span class="na">getLastBlockSeenTimeSecs</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span>
            <span class="n">walletBuilder</span><span class="o">.</span><span class="na">setLastSeenBlockTimeSecs</span><span class="o">(</span><span class="n">wallet</span><span class="o">.</span><span class="na">getLastBlockSeenTimeSecs</span><span class="o">());</span>

        <span class="c1">// Populate the scrypt parameters.</span>
        <span class="nc">KeyCrypter</span> <span class="n">keyCrypter</span> <span class="o">=</span> <span class="n">wallet</span><span class="o">.</span><span class="na">getKeyCrypter</span><span class="o">();</span> <span class="c1">// scrypt 参数</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">keyCrypter</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// The wallet is unencrypted.</span>
            <span class="n">walletBuilder</span><span class="o">.</span><span class="na">setEncryptionType</span><span class="o">(</span><span class="nc">EncryptionType</span><span class="o">.</span><span class="na">UNENCRYPTED</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="c1">// The wallet is encrypted.</span>
            <span class="n">walletBuilder</span><span class="o">.</span><span class="na">setEncryptionType</span><span class="o">(</span><span class="n">keyCrypter</span><span class="o">.</span><span class="na">getUnderstoodEncryptionType</span><span class="o">());</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">keyCrypter</span> <span class="k">instanceof</span> <span class="nc">KeyCrypterScrypt</span><span class="o">)</span> <span class="o">{</span>
                <span class="nc">KeyCrypterScrypt</span> <span class="n">keyCrypterScrypt</span> <span class="o">=</span> <span class="o">(</span><span class="nc">KeyCrypterScrypt</span><span class="o">)</span> <span class="n">keyCrypter</span><span class="o">;</span>
                <span class="n">walletBuilder</span><span class="o">.</span><span class="na">setEncryptionParameters</span><span class="o">(</span><span class="n">keyCrypterScrypt</span><span class="o">.</span><span class="na">getScryptParameters</span><span class="o">());</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="c1">// Some other form of encryption has been specified that we do not know how to persist.</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="s">"The wallet has encryption of type '"</span> <span class="o">+</span> <span class="n">keyCrypter</span><span class="o">.</span><span class="na">getUnderstoodEncryptionType</span><span class="o">()</span> <span class="o">+</span> <span class="s">"' but this WalletProtobufSerializer does not know how to persist this."</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">wallet</span><span class="o">.</span><span class="na">getKeyRotationTime</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="kt">long</span> <span class="n">timeSecs</span> <span class="o">=</span> <span class="n">wallet</span><span class="o">.</span><span class="na">getKeyRotationTime</span><span class="o">().</span><span class="na">getTime</span><span class="o">()</span> <span class="o">/</span> <span class="mi">1000</span><span class="o">;</span>
            <span class="n">walletBuilder</span><span class="o">.</span><span class="na">setKeyRotationTime</span><span class="o">(</span><span class="n">timeSecs</span><span class="o">);</span> <span class="c1">// rotation time</span>
        <span class="o">}</span>

        <span class="n">populateExtensions</span><span class="o">(</span><span class="n">wallet</span><span class="o">,</span> <span class="n">walletBuilder</span><span class="o">);</span>

        <span class="k">for</span> <span class="o">(</span><span class="nc">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">ByteString</span><span class="o">&gt;</span> <span class="n">entry</span> <span class="o">:</span> <span class="n">wallet</span><span class="o">.</span><span class="na">getTags</span><span class="o">().</span><span class="na">entrySet</span><span class="o">())</span> <span class="o">{</span>
            <span class="nc">Protos</span><span class="o">.</span><span class="na">Tag</span><span class="o">.</span><span class="na">Builder</span> <span class="n">tag</span> <span class="o">=</span> <span class="nc">Protos</span><span class="o">.</span><span class="na">Tag</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">().</span><span class="na">setTag</span><span class="o">(</span><span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">()).</span><span class="na">setData</span><span class="o">(</span><span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">());</span>
            <span class="n">walletBuilder</span><span class="o">.</span><span class="na">addTags</span><span class="o">(</span><span class="n">tag</span><span class="o">);</span> <span class="c1">// Tags</span>
        <span class="o">}</span>

        <span class="k">for</span> <span class="o">(</span><span class="nc">TransactionSigner</span> <span class="n">signer</span> <span class="o">:</span> <span class="n">wallet</span><span class="o">.</span><span class="na">getTransactionSigners</span><span class="o">())</span> <span class="o">{</span>
            <span class="c1">// do not serialize LocalTransactionSigner as it's being added implicitly</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">signer</span> <span class="k">instanceof</span> <span class="nc">LocalTransactionSigner</span><span class="o">)</span>
                <span class="k">continue</span><span class="o">;</span>
            <span class="nc">Protos</span><span class="o">.</span><span class="na">TransactionSigner</span><span class="o">.</span><span class="na">Builder</span> <span class="n">protoSigner</span> <span class="o">=</span> <span class="nc">Protos</span><span class="o">.</span><span class="na">TransactionSigner</span><span class="o">.</span><span class="na">newBuilder</span><span class="o">();</span>
            <span class="n">protoSigner</span><span class="o">.</span><span class="na">setClassName</span><span class="o">(</span><span class="n">signer</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
            <span class="n">protoSigner</span><span class="o">.</span><span class="na">setData</span><span class="o">(</span><span class="nc">ByteString</span><span class="o">.</span><span class="na">copyFrom</span><span class="o">(</span><span class="n">signer</span><span class="o">.</span><span class="na">serialize</span><span class="o">()));</span>
            <span class="n">walletBuilder</span><span class="o">.</span><span class="na">addTransactionSigners</span><span class="o">(</span><span class="n">protoSigner</span><span class="o">);</span> <span class="c1">// Signer</span>
        <span class="o">}</span>

        <span class="c1">// Populate the wallet version.</span>
        <span class="n">walletBuilder</span><span class="o">.</span><span class="na">setVersion</span><span class="o">(</span><span class="n">wallet</span><span class="o">.</span><span class="na">getVersion</span><span class="o">());</span> <span class="c1">// 钱包版本</span>

        <span class="k">return</span> <span class="n">walletBuilder</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>所以，就是基本备份了钱包的所有用户数据。。钱包交易越多，密钥越多，备份后的钱包就越大。</p>

<p>一般备份钱包到文件的时候，需要用户输入一个密码，钱包数据是用这个密码加密过的，恢复钱包的时候，也需要提供这个密码。备份后的钱包文件，最好离线保存起来。</p>

<p>这种钱包很好恢复，因为包含了所有的数据，包括所有的密钥和密钥对应的路径等，只需要原样载入数据库就可以。那么在比如只提供助记词的时候，钱包是如何恢复的？</p>

<h3 id="钱包如何知道密钥数量">钱包如何知道密钥数量</h3>

<p>只知道助记词的情况下，钱包会先计算出来种子，然后根据种子来生成根密钥， 并按照索引递增的方式，推导出一定数量的子密钥，这个数量一般是预设的，比如 30 个子密钥。</p>

<p>当然这些子密钥可能不足或者超过了用户所有使用过的密钥数量，这都没关系。</p>

<p>然后钱包将这些密钥对应的地址发送给全节点来获取所有相关的交易数据，因为交易数据的输出脚本部分都会包含地址，所以可以通过对比地址来知道有哪些交易是与这些地址相关的。</p>

<blockquote>
  <p>为什么钱包不自己搜索所有的交易数据？因为钱包是轻节点，只保留了区块链的一部分，没有所有的块数据，只能依靠全节点来检索数据。</p>

  <p>全节点是什么？保有一份完整的、最新的区块链拷贝的节点都叫做全节点。全节点能够独立自主地校验所有交易，而不需借由任何外部参照。常见的有 Reference Client、Full Block Chain Node、Solo Miner。</p>
</blockquote>

<blockquote>
  <p>涉及到用户隐私保护，钱包发送给全节点的地址信息，是通过 bloom 处理过的，是不完整的信息，全节点会发回所有包含这些信息的交易数据，然后钱包根据完整的地址来筛选信息，得到自己相关的信息。</p>
</blockquote>

<p>然后全节点将这些信息发送回钱包，钱包就知道了这些地址中哪些是使用过的，因此就知道了两个信息，①对应的哪些密钥是使用过的，② 各个地址中有多少余额。</p>

<p>如果预生成的密钥，都已经使用过，那么就说明所有的密钥可能不止这些，那么钱包会继续生成一批密钥，然后再将这些密钥对应的地址发送给全节点来获取信息，直到预生成的密钥，没有全部使用为止。</p>

<p>通过这个过程，钱包就知道了用户所有的密钥和余额信息。</p>

<p>参考：</p>

<p><a href="https://github.com/bitcoinj/bitcoinj">bitcoinj</a> 代码实现</p>

<script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script>

:ET