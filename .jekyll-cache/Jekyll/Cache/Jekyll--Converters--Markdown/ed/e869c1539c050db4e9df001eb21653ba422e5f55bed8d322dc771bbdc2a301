I"LW<p>比特币的 PoW 算法，之前的文章中已经提到，以太坊目前使用的共识算法 (Ethash) 虽然也是 PoW，但是与比特币的不同。</p>

<h3 id="bitcoin-的-pow-算法">bitcoin 的 PoW 算法</h3>

<p>比特币的工作量证明算法，可以用下面这个公式表示:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td> --><td class="rouge-code"><pre><span class="n">hash_output</span> <span class="o">=</span> <span class="n">sha256</span><span class="p">(</span><span class="n">prev_hash</span><span class="p">,</span> <span class="n">merkle_root</span><span class="p">,</span> <span class="n">nonce</span><span class="p">)</span>
<span class="n">hash_output</span> <span class="err">应该不大于</span> <span class="n">nBits</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>prev_hash，前一个区块的 hash，固定值。</li>
  <li>merkle_root，默克尔树的根，每个矿工计算出来的都不一样，但是同一个矿工每次计算都一致。</li>
  <li>nonce，如果 hash 计算的结果大于 nBits，那么矿工就会改变 nonce 的值，重新计算 hash。</li>
</ul>

<p>（这里没考虑 extern_nonce）</p>

<p>这个算法的实现很简单，很容易理解，很符合共识算法的特点，<strong>求解困难验证容易</strong>，至今也运行良好，但是慢慢显现出来一些弊端：</p>

<ul>
  <li>
    <p>求解过程完全依赖 CPU 的计算能力 ，所以出现了很多针对 hash 优化的芯片，即 ASIC。</p>

    <p>新的硬件抛弃了通用性，只做 hash，因而大幅提升了求解的速度，为了追上大家的速度，矿场只能升级硬件，这导致大批量的矿机过时，而专用的芯片只能保持一段时间的领先，在大家都升级之后，又变得毫无优势，另外关键的是这种芯片只能用来挖矿，还有其他用途么？</p>
  </li>
  <li>
    <p>另外这种硬件很昂贵，普通的家用电脑越来越难与之对抗，算力越来越集中于少数资金雄厚的矿场手中。</p>
  </li>
  <li>
    <p>普通人目前只能通过加入矿池才有机会。其实这种矿工，根本算不上矿工，因为所有的数据都是由矿池提供的，自己只是计算 hash，相当于这个庞大计算机中的一个 cpu 而已，实际控制权都在矿池，也导致了算力越来越集中。</p>
  </li>
  <li>
    <p>其实矿池的出现也是因为算法，因为其中变化的变量只有 nonce 一个，其他都是固定的，所以可以没有区块数据，可以不用大内存，甚至可以没有硬盘，只要能满足计算 hash 的需求即可。</p>
  </li>
  <li>
    <p>另外所需的存储空间也很大，现在 200 多 G，这已经超过大多数手机的存储空间，这也限制了挖矿的人群。</p>
  </li>
</ul>

<p>正因为这些问题，才发明了后续的很多算法。</p>

<h3 id="eth-的-pow-算法ethash">ETH 的 PoW 算法，Ethash</h3>

<p>Ethash 的前身是 Dagger Hashimoto，而 Dagger Hashimoto 的前身是 Dagger 和 Hashimoto 算法。</p>

<p>将前面说的问题总结下，这些也是这些算法要解决的问题：</p>

<ol>
  <li><strong>抵制矿机（ASIC）。</strong></li>
  <li><strong>全链数据存储。前面说的矿池的例子。</strong></li>
  <li><strong>轻客户端。前面说的手机的例子。</strong></li>
</ol>

<p>我们看下 hashimoto 和 ethash，dagger 包含在了 ethash 里面。</p>

<h4 id="1-hashimoto">1. Hashimoto</h4>

<p>Hashimoto I/O bound proof of work，基于 I/O 带宽的工作量证明算法。</p>

<p>Hashimoto 由 hash, shift, modulo 组成。</p>

<p>直接看下算法代码</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td> --><td class="rouge-code"><pre><span class="cp"># hash
</span><span class="n">hash_output_A</span> <span class="o">=</span> <span class="n">sha256</span><span class="p">(</span><span class="n">prev_hash</span><span class="p">,</span> <span class="n">merkle_root</span><span class="p">,</span> <span class="n">nonce</span><span class="p">)</span>
<span class="k">for</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="n">to</span> <span class="mi">63</span> <span class="k">do</span>
    <span class="cp"># shift
</span>	<span class="n">shifted_A</span> <span class="o">=</span> <span class="n">hash_output_A</span> <span class="o">&gt;&gt;</span> <span class="n">i</span>
    <span class="cp"># mode
</span>	<span class="n">transaction</span> <span class="o">=</span> <span class="n">shifted_A</span> <span class="n">mod</span> <span class="n">total_transactions</span>
    <span class="cp"># I/O
</span>	<span class="n">txid</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">get_txid</span><span class="p">(</span><span class="n">transaction</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">i</span>
<span class="n">end</span> <span class="k">for</span>
<span class="n">txid_mix</span> <span class="o">=</span> <span class="n">txid</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="err">⊕</span> <span class="n">txid</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="err">…</span> <span class="err">⊕</span> <span class="n">txid</span><span class="p">[</span><span class="mi">63</span><span class="p">]</span>
<span class="n">final_output</span> <span class="o">=</span> <span class="n">txid_mix</span> <span class="err">⊕</span> <span class="p">(</span><span class="n">nonce</span> <span class="o">&lt;&lt;</span> <span class="mi">192</span><span class="p">)</span>
<span class="n">final_output</span> <span class="err">应该不大于</span> <span class="n">nBits</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>sha256 的结果不直接与 nBits 比较了，而是作为了中间变量。下面的循环里，调用了 get_txid，这个函数获取对应编号的 transaction 的 id 值，这个 transaction 是从内存或磁盘里取出来的，所以这里是 I/O 操作。然后在将获取到的 id 异或得到最终的 output，将这个与 nBits 比较。</p>

<p>这个算法解决了上面说的 1 和 2 的问题，是怎么解决的？</p>

<p>首先，求解过程不只是 hash 了，还需要一些读取操作，大量的时间消耗在了 I/O 操作上，所以单纯的 ASIC，只是提高了求 hash 的速度，无法使整体获得很大的提升。那么可以用告诉存储介质来提升速度，确实是，可以制作超高速的内存或者固态硬盘，但是那么容易么？这个目标是现在所有内存或者固态硬盘厂家的目标，现在这么多厂家都没解决的问题，可能短时间做到么？不可能的，那 ASIC 是怎么回事？因为只计算 hash 这个目标和 CPU 厂家的目标是不同的， CPU 厂家的目标是通用性，而不是这一个算法。<strong>这个解决了 1 的问题</strong>。</p>

<p>然后，还是因为 I/O，考虑矿池的情景，大量的矿工因为没有区块链数据，只能通过网络向矿池请求数据，在一次计算中，这种请求就有 64 次，多次计算，这种请求的总数就很客观，矿池为了应付庞大数量的请求必然需要投入非常多的硬件成本，这就不划算了，还不如大家自己保存区块链数据。另外网络延迟也是一种消耗。<strong>这个解决了 2 的问题</strong>。</p>

<p>而且，在这种算法下，矿工需要保存完整的区块链数据，哪怕只少了一个区块，也会导致挖矿成功的概率降低很多。文章中举了一个例子，假设一共 100 个区块，少了 1 块，那么就需要 2 倍的 hash 次数，少了 2 块，就需要 4 倍，这个很好理解，想了解的可以看下 <a href="https://blog.msiter.com/Hashimoto%20IO%20bound%20proof%20of%20work-20180824.html">这个文章</a>。</p>

<h4 id="2-ethash">2. ethash</h4>

<p>我们直接看下源码，从入口开始看：</p>

<p>Seal，consensus/ethash/sealer.go</p>

<p><img src="/images/md/PoW_0.png" alt="" /></p>

<p><img src="/images/md/PoW_1.png" alt="" /></p>

<p>这个函数主要是创建和子线程的控制，然后我们看下同一个文件的 mine 这个函数：</p>

<p><img src="/images/md/PoW_2.png" alt="" /></p>

<p>其中的 hashimotoFull，这个名字很熟悉了，前面介绍过 hashimoto 的算法，这里的算法实现和之前的有所区别，主要是<strong>这里使用的数据集不再是整个区块链，而是叫做 DAG 的数据集，这个后面再说</strong>。</p>

<p>hashimotoFull，consensus/ethash/algorithm.go</p>

<p><img src="/images/md/PoW_3.png" alt="" /></p>

<p>这函数主要是创建了一个闭包函数，传递给了 hashimoto，这个闭包函数在根据传进来的参数，在数据集中选择特定的数据。</p>

<p>看下还是在这个文件内的 hashimoto 函数</p>

<p><img src="/images/md/PoW_4.png" alt="" /></p>

<p>简单介绍下 FNV，FNV 是一种哈希算法，具有高离散性，特别适用于哈希非常相似的字符串，函数如下，还是在这个文件里：</p>

<p><img src="/images/md/PoW_5.png" alt="" /></p>

<p>到这里整个挖矿的流程就介绍完了。</p>

<h4 id="3-dag">3. DAG</h4>

<p>ethash 与传统 hashimoto 不同的地方，主要是使用了特殊的数据集 DAG，而生成 DAG 需要先生成 cache。</p>

<p>这里面有几个基础概念，先介绍下。</p>

<ul>
  <li>
    <p>epoch。每 30000 个区块，叫做一个 epoch，“一世”，按照 12 秒一个区块的速度，大概是 100 小时。</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td> --><td class="rouge-code"><pre>epochLength        = 30000
epoch := block / epochLength
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li>
    <p>cache/DAG 的生成周期。因为生成 DAG 很慢，所以在一定周期内，DAG/cache 都是复用的，每个 epoch 重新生成一次。DAG 依赖 cache，cache 依赖 seed，而 seed 只和区块高度有关，所以可以预先生成。</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
</pre></td> --><td class="rouge-code"><pre>seed := seedHash(c.epoch*epochLength + 1)
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li>
    <p>cache/DAG 的大小。大小是不固定的，epoch 在 2048（区块高度在 61440000）之前，是按照写死的数组里的数来得到 size，在之后是按照一个公式来计算，我们看下代码片段：</p>

    <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td> --><td class="rouge-code"><pre><span class="n">func</span> <span class="p">(</span><span class="n">d</span> <span class="o">*</span><span class="n">dataset</span><span class="p">)</span> <span class="n">generate</span><span class="p">(</span><span class="n">dir</span> <span class="n">string</span><span class="p">,</span> <span class="n">limit</span> <span class="kt">int</span><span class="p">,</span> <span class="n">test</span> <span class="kt">bool</span><span class="p">)</span> <span class="p">{</span>
	<span class="p">...</span>
	<span class="n">csize</span> <span class="o">:=</span> <span class="n">cacheSize</span><span class="p">(</span><span class="n">d</span><span class="p">.</span><span class="n">epoch</span><span class="o">*</span><span class="n">epochLength</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
	<span class="n">dsize</span> <span class="o">:=</span> <span class="n">datasetSize</span><span class="p">(</span><span class="n">d</span><span class="p">.</span><span class="n">epoch</span><span class="o">*</span><span class="n">epochLength</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
	<span class="p">...</span>
    <span class="n">generateCache</span><span class="p">(</span><span class="n">cache</span><span class="p">,</span> <span class="n">d</span><span class="p">.</span><span class="n">epoch</span><span class="p">,</span> <span class="n">seed</span><span class="p">)</span>
	<span class="n">generateDataset</span><span class="p">(</span><span class="n">d</span><span class="p">.</span><span class="n">dataset</span><span class="p">,</span> <span class="n">d</span><span class="p">.</span><span class="n">epoch</span><span class="p">,</span> <span class="n">cache</span><span class="p">)</span>
	<span class="p">...</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>

    <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td> --><td class="rouge-code"><pre><span class="n">func</span> <span class="n">cacheSize</span><span class="p">(</span><span class="n">block</span> <span class="n">uint64</span><span class="p">)</span> <span class="n">uint64</span> <span class="p">{</span>
    <span class="n">epoch</span> <span class="o">:=</span> <span class="kt">int</span><span class="p">(</span><span class="n">block</span> <span class="o">/</span> <span class="n">epochLength</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">epoch</span> <span class="o">&lt;</span> <span class="n">maxEpoch</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">cacheSizes</span><span class="p">[</span><span class="n">epoch</span><span class="p">]</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">calcCacheSize</span><span class="p">(</span><span class="n">epoch</span><span class="p">)</span> <span class="c1">// 超过 2048 epoch，用这个函数计算</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>

    <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td> --><td class="rouge-code"><pre><span class="n">func</span> <span class="n">datasetSize</span><span class="p">(</span><span class="n">block</span> <span class="n">uint64</span><span class="p">)</span> <span class="n">uint64</span> <span class="p">{</span>
    <span class="n">epoch</span> <span class="o">:=</span> <span class="kt">int</span><span class="p">(</span><span class="n">block</span> <span class="o">/</span> <span class="n">epochLength</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">epoch</span> <span class="o">&lt;</span> <span class="n">maxEpoch</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">datasetSizes</span><span class="p">[</span><span class="n">epoch</span><span class="p">]</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">calcDatasetSize</span><span class="p">(</span><span class="n">epoch</span><span class="p">)</span> <span class="c1">// 超过 2048 epoch，用这个函数计算</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>

    <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td> --><td class="rouge-code"><pre><span class="n">func</span> <span class="nf">calcCacheSize</span><span class="p">(</span><span class="n">epoch</span> <span class="kt">int</span><span class="p">)</span> <span class="n">uint64</span> <span class="p">{</span>
    <span class="n">size</span> <span class="o">:=</span> <span class="n">cacheInitBytes</span> <span class="o">+</span> <span class="n">cacheGrowthBytes</span><span class="o">*</span><span class="n">uint64</span><span class="p">(</span><span class="n">epoch</span><span class="p">)</span> <span class="o">-</span> <span class="n">hashBytes</span>
    <span class="k">for</span> <span class="o">!</span><span class="k">new</span><span class="p">(</span><span class="n">big</span><span class="p">.</span><span class="n">Int</span><span class="p">).</span><span class="n">SetUint64</span><span class="p">(</span><span class="n">size</span> <span class="o">/</span> <span class="n">hashBytes</span><span class="p">).</span><span class="n">ProbablyPrime</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// Always accurate for n &lt; 2^64</span>
        <span class="n">size</span> <span class="o">-=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">hashBytes</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">size</span>
<span class="err">}</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>

    <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td> --><td class="rouge-code"><pre><span class="n">func</span> <span class="nf">calcDatasetSize</span><span class="p">(</span><span class="n">epoch</span> <span class="kt">int</span><span class="p">)</span> <span class="n">uint64</span> <span class="p">{</span>
    <span class="n">size</span> <span class="o">:=</span> <span class="n">datasetInitBytes</span> <span class="o">+</span> <span class="n">datasetGrowthBytes</span><span class="o">*</span><span class="n">uint64</span><span class="p">(</span><span class="n">epoch</span><span class="p">)</span> <span class="o">-</span> <span class="n">mixBytes</span>
    <span class="k">for</span> <span class="o">!</span><span class="k">new</span><span class="p">(</span><span class="n">big</span><span class="p">.</span><span class="n">Int</span><span class="p">).</span><span class="n">SetUint64</span><span class="p">(</span><span class="n">size</span> <span class="o">/</span> <span class="n">mixBytes</span><span class="p">).</span><span class="n">ProbablyPrime</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// Always accurate for n &lt; 2^64</span>
        <span class="n">size</span> <span class="o">-=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">mixBytes</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">size</span>
<span class="err">}</span>
</pre></td></tr></tbody></table></code></pre></div>    </div>

    <p>可以看到，在 2048 epoch (区块高度 61440000) 之前，实际上就是在数组里取值，数组是这样的：</p>

    <p><img src="/images/md/PoW_6.png" alt="" /></p>

    <p><img src="/images/md/PoW_7.png" alt="" /></p>

    <p>现在 ETH 的区块高度为 6365581，对比下 61440000，这些数想要用完还得很久很久，到 2048 的时候，cache 和 DAG 的大小分别为：</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><!-- <td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td> --><td class="rouge-code"><pre>DAG:
18245220736/8/1024/1024 = 2174.999，大概 2G
cache:
285081536/8/1024/1024 = 33.984，大概 33MB
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
</ul>

<p>这些说完了，我们先看下生成 cache 的代码，generateCache (consensus/ethash/algorithm.go)</p>

<p><img src="/images/md/PoW_8.png" alt="" /></p>

<p><img src="/images/md/PoW_9.png" alt="" /></p>

<p>接下来看看 dataset 生成的代码，generateDataset (consensus/ethash/algorithm.go)</p>

<p><img src="/images/md/PoW_10.png" alt="" /></p>

<p><img src="/images/md/PoW_11.png" alt="" /></p>

<p>到这生成 cache 和 DAG 的流程就都介绍完了。</p>

<h4 id="4-ethash-解决了什么问题">4. ethash 解决了什么问题</h4>

<p>我们再回忆下之前说的共识算法要解决的三个问题：</p>

<ol>
  <li><strong>抵制矿机（ASIC）。</strong></li>
  <li><strong>全链数据存储。前面说的矿池的例子。</strong></li>
  <li><strong>轻客户端。前面说的手机的例子。</strong></li>
</ol>

<p>之前的 hashimoto 解决了，1 和 2，但是因为需要全链数据，所以 3 没解决。</p>

<p>ethash，使用了类似 hashimoto 的算法，在保证 1 的基础上，因为 DAG 要比全链数据小很多，所以理论上可以应用在轻客户端上，3 算是解决了，那么 2 呢？首先肯定不是全链数据了，而且从 ETH 的代码里看，默认支持远程挖矿，也就是矿池模式，所以 2 是没解决的，或者说是以太坊不想解决的。</p>

<p>那么实际上中心化问题还是有的，但是因为解决了 1 和 3，使普通人可以挖矿，挖矿的整体人群扩大了，所以综合来看，个人觉得还是解决了部分的中心化问题。</p>

<h3 id="参考">参考</h3>

<p>https://www.cnblogs.com/Evsward/p/ethash.html</p>

<p>https://github.com/ZtesoftCS/go-ethereum-code-analysis/blob/master/hashimoto.md</p>

<p>https://blog.msiter.com/Hashimoto%20IO%20bound%20proof%20of%20work-20180824.html</p>

<p>https://github.com/ethereum/wiki/wiki/Mining#so-what-is-mining-anyway<script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script></p>
:ET