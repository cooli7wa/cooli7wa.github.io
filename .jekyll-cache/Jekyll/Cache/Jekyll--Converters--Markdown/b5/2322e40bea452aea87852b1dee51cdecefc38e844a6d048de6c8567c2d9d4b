I"ߝ<p>这篇学习下处理区块的流程，这里包括创建和调用 evm、计算 gas 消耗、更新状态树和 receipt等。</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre></td><td class="rouge-code"><pre><span class="c">// Process processes the state changes according to the Ethereum rules by running</span>
<span class="c">// the transaction messages using the statedb and applying any rewards to both</span>
<span class="c">// the processor (coinbase) and any included uncles.</span>
<span class="c">//</span>
<span class="c">// Process returns the receipts and logs accumulated during the process and</span>
<span class="c">// returns the amount of gas that was used in the process. If any of the</span>
<span class="c">// transactions failed to execute due to insufficient gas it will return an error.</span>
<span class="k">func</span> <span class="p">(</span><span class="n">p</span> <span class="o">*</span><span class="n">StateProcessor</span><span class="p">)</span> <span class="n">Process</span><span class="p">(</span><span class="n">block</span> <span class="o">*</span><span class="n">types</span><span class="o">.</span><span class="n">Block</span><span class="p">,</span> <span class="n">statedb</span> <span class="o">*</span><span class="n">state</span><span class="o">.</span><span class="n">StateDB</span><span class="p">,</span> <span class="n">cfg</span> <span class="n">vm</span><span class="o">.</span><span class="n">Config</span><span class="p">)</span> <span class="p">(</span><span class="n">types</span><span class="o">.</span><span class="n">Receipts</span><span class="p">,</span> <span class="p">[]</span><span class="o">*</span><span class="n">types</span><span class="o">.</span><span class="n">Log</span><span class="p">,</span> <span class="kt">uint64</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">var</span> <span class="p">(</span>
        <span class="n">receipts</span> <span class="n">types</span><span class="o">.</span><span class="n">Receipts</span>
        <span class="n">usedGas</span>  <span class="o">=</span> <span class="nb">new</span><span class="p">(</span><span class="kt">uint64</span><span class="p">)</span>
        <span class="n">header</span>   <span class="o">=</span> <span class="n">block</span><span class="o">.</span><span class="n">Header</span><span class="p">()</span>
        <span class="n">allLogs</span>  <span class="p">[]</span><span class="o">*</span><span class="n">types</span><span class="o">.</span><span class="n">Log</span>
        <span class="n">gp</span>       <span class="o">=</span> <span class="nb">new</span><span class="p">(</span><span class="n">GasPool</span><span class="p">)</span><span class="o">.</span><span class="n">AddGas</span><span class="p">(</span><span class="n">block</span><span class="o">.</span><span class="n">GasLimit</span><span class="p">())</span>
    <span class="p">)</span>
    <span class="c">// Mutate the block and state according to any hard-fork specs</span>
    <span class="k">if</span> <span class="n">p</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">DAOForkSupport</span> <span class="o">&amp;&amp;</span> <span class="n">p</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">DAOForkBlock</span> <span class="o">!=</span> <span class="no">nil</span> <span class="o">&amp;&amp;</span> <span class="n">p</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">DAOForkBlock</span><span class="o">.</span><span class="n">Cmp</span><span class="p">(</span><span class="n">block</span><span class="o">.</span><span class="n">Number</span><span class="p">())</span> <span class="o">==</span> <span class="m">0</span> <span class="p">{</span>
        <span class="n">misc</span><span class="o">.</span><span class="n">ApplyDAOHardFork</span><span class="p">(</span><span class="n">statedb</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="c">// Iterate over and process the individual transactions</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">tx</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">block</span><span class="o">.</span><span class="n">Transactions</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">statedb</span><span class="o">.</span><span class="n">Prepare</span><span class="p">(</span><span class="n">tx</span><span class="o">.</span><span class="n">Hash</span><span class="p">(),</span> <span class="n">block</span><span class="o">.</span><span class="n">Hash</span><span class="p">(),</span> <span class="n">i</span><span class="p">)</span>
        <span class="n">receipt</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">ApplyTransaction</span><span class="p">(</span><span class="n">p</span><span class="o">.</span><span class="n">config</span><span class="p">,</span> <span class="n">p</span><span class="o">.</span><span class="n">bc</span><span class="p">,</span> <span class="no">nil</span><span class="p">,</span> <span class="n">gp</span><span class="p">,</span> <span class="n">statedb</span><span class="p">,</span> <span class="n">header</span><span class="p">,</span> <span class="n">tx</span><span class="p">,</span> <span class="n">usedGas</span><span class="p">,</span> <span class="n">cfg</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
            <span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="no">nil</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="n">err</span>
        <span class="p">}</span>
        <span class="n">receipts</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">receipts</span><span class="p">,</span> <span class="n">receipt</span><span class="p">)</span>
        <span class="n">allLogs</span> <span class="o">=</span> <span class="nb">append</span><span class="p">(</span><span class="n">allLogs</span><span class="p">,</span> <span class="n">receipt</span><span class="o">.</span><span class="n">Logs</span><span class="o">...</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="c">// Finalize the block, applying any consensus engine specific extras (e.g. block rewards)</span>
    <span class="n">p</span><span class="o">.</span><span class="n">engine</span><span class="o">.</span><span class="n">Finalize</span><span class="p">(</span><span class="n">p</span><span class="o">.</span><span class="n">bc</span><span class="p">,</span> <span class="n">header</span><span class="p">,</span> <span class="n">statedb</span><span class="p">,</span> <span class="n">block</span><span class="o">.</span><span class="n">Transactions</span><span class="p">(),</span> <span class="n">block</span><span class="o">.</span><span class="n">Uncles</span><span class="p">(),</span> <span class="n">receipts</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">receipts</span><span class="p">,</span> <span class="n">allLogs</span><span class="p">,</span> <span class="o">*</span><span class="n">usedGas</span><span class="p">,</span> <span class="no">nil</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>GasPool 是区块 gas 消耗的上限。</p>

<p>这里的主要代码是，for 循环，这里会单独处理每一个交易，调用 ApplyTransaction()，返回 receipt。</p>

<p>Prepare 代码：</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="c">// Prepare sets the current transaction hash and index and block hash which is</span>
<span class="c">// used when the EVM emits new state logs.</span>
<span class="k">func</span> <span class="p">(</span><span class="n">self</span> <span class="o">*</span><span class="n">StateDB</span><span class="p">)</span> <span class="n">Prepare</span><span class="p">(</span><span class="n">thash</span><span class="p">,</span> <span class="n">bhash</span> <span class="n">common</span><span class="o">.</span><span class="n">Hash</span><span class="p">,</span> <span class="n">ti</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">self</span><span class="o">.</span><span class="n">thash</span> <span class="o">=</span> <span class="n">thash</span>
    <span class="n">self</span><span class="o">.</span><span class="n">bhash</span> <span class="o">=</span> <span class="n">bhash</span>
    <span class="n">self</span><span class="o">.</span><span class="n">txIndex</span> <span class="o">=</span> <span class="n">ti</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>ApplyTransaction() 代码：</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
</pre></td><td class="rouge-code"><pre><span class="c">// ApplyTransaction attempts to apply a transaction to the given state database</span>
<span class="c">// and uses the input parameters for its environment. It returns the receipt</span>
<span class="c">// for the transaction, gas used and an error if the transaction failed,</span>
<span class="c">// indicating the block was invalid.</span>
<span class="k">func</span> <span class="n">ApplyTransaction</span><span class="p">(</span><span class="n">config</span> <span class="o">*</span><span class="n">params</span><span class="o">.</span><span class="n">ChainConfig</span><span class="p">,</span> <span class="n">bc</span> <span class="n">ChainContext</span><span class="p">,</span> <span class="n">author</span> <span class="o">*</span><span class="n">common</span><span class="o">.</span><span class="n">Address</span><span class="p">,</span> <span class="n">gp</span> <span class="o">*</span><span class="n">GasPool</span><span class="p">,</span> <span class="n">statedb</span> <span class="o">*</span><span class="n">state</span><span class="o">.</span><span class="n">StateDB</span><span class="p">,</span> <span class="n">header</span> <span class="o">*</span><span class="n">types</span><span class="o">.</span><span class="n">Header</span><span class="p">,</span> <span class="n">tx</span> <span class="o">*</span><span class="n">types</span><span class="o">.</span><span class="n">Transaction</span><span class="p">,</span> <span class="n">usedGas</span> <span class="o">*</span><span class="kt">uint64</span><span class="p">,</span> <span class="n">cfg</span> <span class="n">vm</span><span class="o">.</span><span class="n">Config</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="n">types</span><span class="o">.</span><span class="n">Receipt</span><span class="p">,</span> <span class="kt">uint64</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">msg</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">tx</span><span class="o">.</span><span class="n">AsMessage</span><span class="p">(</span><span class="n">types</span><span class="o">.</span><span class="n">MakeSigner</span><span class="p">(</span><span class="n">config</span><span class="p">,</span> <span class="n">header</span><span class="o">.</span><span class="n">Number</span><span class="p">))</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="n">err</span>
    <span class="p">}</span>
    <span class="c">// Create a new context to be used in the EVM environment</span>
    <span class="n">context</span> <span class="o">:=</span> <span class="n">NewEVMContext</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="n">header</span><span class="p">,</span> <span class="n">bc</span><span class="p">,</span> <span class="n">author</span><span class="p">)</span>
    <span class="c">// Create a new environment which holds all relevant information</span>
    <span class="c">// about the transaction and calling mechanisms.</span>
    <span class="n">vmenv</span> <span class="o">:=</span> <span class="n">vm</span><span class="o">.</span><span class="n">NewEVM</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">statedb</span><span class="p">,</span> <span class="n">config</span><span class="p">,</span> <span class="n">cfg</span><span class="p">)</span>
    <span class="c">// Apply the transaction to the current state (included in the env)</span>
    <span class="n">_</span><span class="p">,</span> <span class="n">gas</span><span class="p">,</span> <span class="n">failed</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">ApplyMessage</span><span class="p">(</span><span class="n">vmenv</span><span class="p">,</span> <span class="n">msg</span><span class="p">,</span> <span class="n">gp</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="n">err</span>
    <span class="p">}</span>
    <span class="c">// Update the state with pending changes</span>
    <span class="k">var</span> <span class="n">root</span> <span class="p">[]</span><span class="kt">byte</span>
    <span class="k">if</span> <span class="n">config</span><span class="o">.</span><span class="n">IsByzantium</span><span class="p">(</span><span class="n">header</span><span class="o">.</span><span class="n">Number</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">statedb</span><span class="o">.</span><span class="n">Finalise</span><span class="p">(</span><span class="no">true</span><span class="p">)</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">root</span> <span class="o">=</span> <span class="n">statedb</span><span class="o">.</span><span class="n">IntermediateRoot</span><span class="p">(</span><span class="n">config</span><span class="o">.</span><span class="n">IsEIP158</span><span class="p">(</span><span class="n">header</span><span class="o">.</span><span class="n">Number</span><span class="p">))</span><span class="o">.</span><span class="n">Bytes</span><span class="p">()</span>
    <span class="p">}</span>
    <span class="o">*</span><span class="n">usedGas</span> <span class="o">+=</span> <span class="n">gas</span>

    <span class="c">// Create a new receipt for the transaction, storing the intermediate root and gas used by the tx</span>
    <span class="c">// based on the eip phase, we're passing whether the root touch-delete accounts.</span>
    <span class="n">receipt</span> <span class="o">:=</span> <span class="n">types</span><span class="o">.</span><span class="n">NewReceipt</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">failed</span><span class="p">,</span> <span class="o">*</span><span class="n">usedGas</span><span class="p">)</span>
    <span class="n">receipt</span><span class="o">.</span><span class="n">TxHash</span> <span class="o">=</span> <span class="n">tx</span><span class="o">.</span><span class="n">Hash</span><span class="p">()</span>
    <span class="n">receipt</span><span class="o">.</span><span class="n">GasUsed</span> <span class="o">=</span> <span class="n">gas</span>
    <span class="c">// if the transaction created a contract, store the creation address in the receipt.</span>
    <span class="k">if</span> <span class="n">msg</span><span class="o">.</span><span class="n">To</span><span class="p">()</span> <span class="o">==</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">receipt</span><span class="o">.</span><span class="n">ContractAddress</span> <span class="o">=</span> <span class="n">crypto</span><span class="o">.</span><span class="n">CreateAddress</span><span class="p">(</span><span class="n">vmenv</span><span class="o">.</span><span class="n">Context</span><span class="o">.</span><span class="n">Origin</span><span class="p">,</span> <span class="n">tx</span><span class="o">.</span><span class="n">Nonce</span><span class="p">())</span>
    <span class="p">}</span>
    <span class="c">// Set the receipt logs and create a bloom for filtering</span>
    <span class="n">receipt</span><span class="o">.</span><span class="n">Logs</span> <span class="o">=</span> <span class="n">statedb</span><span class="o">.</span><span class="n">GetLogs</span><span class="p">(</span><span class="n">tx</span><span class="o">.</span><span class="n">Hash</span><span class="p">())</span>
    <span class="n">receipt</span><span class="o">.</span><span class="n">Bloom</span> <span class="o">=</span> <span class="n">types</span><span class="o">.</span><span class="n">CreateBloom</span><span class="p">(</span><span class="n">types</span><span class="o">.</span><span class="n">Receipts</span><span class="p">{</span><span class="n">receipt</span><span class="p">})</span>

    <span class="k">return</span> <span class="n">receipt</span><span class="p">,</span> <span class="n">gas</span><span class="p">,</span> <span class="n">err</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>先将 tx 转化为了 Message 类型，然后构造了 evm 环境，调用其 ApplyMessage 函数，这时的 evm 已经包含了所有需要的数据。</p>

<p>IntermediateRoot 这个不知道什么用处？</p>

<p>后面就是将所有处理结果和日志存储在 receipt 内，如果是创建合约的交易，那么还会存储合约地址。</p>

<p>gas 的消耗，如果只是转账，是固定的 21000，如果是创建合约、或者是跟合约交互，那么跟具体的操作有关，可以看下 params/protocol_params.go 这里的预设值。</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="rouge-code"><pre><span class="c">// AsMessage returns the transaction as a core.Message.</span>
<span class="c">//</span>
<span class="c">// AsMessage requires a signer to derive the sender.</span>
<span class="c">//</span>
<span class="c">// XXX Rename message to something less arbitrary?</span>
<span class="k">func</span> <span class="p">(</span><span class="n">tx</span> <span class="o">*</span><span class="n">Transaction</span><span class="p">)</span> <span class="n">AsMessage</span><span class="p">(</span><span class="n">s</span> <span class="n">Signer</span><span class="p">)</span> <span class="p">(</span><span class="n">Message</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">msg</span> <span class="o">:=</span> <span class="n">Message</span><span class="p">{</span>
        <span class="n">nonce</span><span class="o">:</span>      <span class="n">tx</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">AccountNonce</span><span class="p">,</span>
        <span class="n">gasLimit</span><span class="o">:</span>   <span class="n">tx</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">GasLimit</span><span class="p">,</span>
        <span class="n">gasPrice</span><span class="o">:</span>   <span class="nb">new</span><span class="p">(</span><span class="n">big</span><span class="o">.</span><span class="n">Int</span><span class="p">)</span><span class="o">.</span><span class="n">Set</span><span class="p">(</span><span class="n">tx</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">Price</span><span class="p">),</span>
        <span class="n">to</span><span class="o">:</span>         <span class="n">tx</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">Recipient</span><span class="p">,</span>
        <span class="n">amount</span><span class="o">:</span>     <span class="n">tx</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">Amount</span><span class="p">,</span>
        <span class="n">data</span><span class="o">:</span>       <span class="n">tx</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">Payload</span><span class="p">,</span>
        <span class="n">checkNonce</span><span class="o">:</span> <span class="no">true</span><span class="p">,</span>
    <span class="p">}</span>

    <span class="k">var</span> <span class="n">err</span> <span class="kt">error</span>
    <span class="n">msg</span><span class="o">.</span><span class="n">from</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="n">Sender</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">tx</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">msg</span><span class="p">,</span> <span class="n">err</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="c">// ApplyMessage computes the new state by applying the given message</span>
<span class="c">// against the old state within the environment.</span>
<span class="c">//</span>
<span class="c">// ApplyMessage returns the bytes returned by any EVM execution (if it took place),</span>
<span class="c">// the gas used (which includes gas refunds) and an error if it failed. An error always</span>
<span class="c">// indicates a core error meaning that the message would always fail for that particular</span>
<span class="c">// state and would never be accepted within a block.</span>
<span class="k">func</span> <span class="n">ApplyMessage</span><span class="p">(</span><span class="n">evm</span> <span class="o">*</span><span class="n">vm</span><span class="o">.</span><span class="n">EVM</span><span class="p">,</span> <span class="n">msg</span> <span class="n">Message</span><span class="p">,</span> <span class="n">gp</span> <span class="o">*</span><span class="n">GasPool</span><span class="p">)</span> <span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="kt">uint64</span><span class="p">,</span> <span class="kt">bool</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">NewStateTransition</span><span class="p">(</span><span class="n">evm</span><span class="p">,</span> <span class="n">msg</span><span class="p">,</span> <span class="n">gp</span><span class="p">)</span><span class="o">.</span><span class="n">TransitionDb</span><span class="p">()</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
</pre></td><td class="rouge-code"><pre><span class="c">// TransitionDb will transition the state by applying the current message and</span>
<span class="c">// returning the result including the used gas. It returns an error if failed.</span>
<span class="c">// An error indicates a consensus issue.</span>
<span class="k">func</span> <span class="p">(</span><span class="n">st</span> <span class="o">*</span><span class="n">StateTransition</span><span class="p">)</span> <span class="n">TransitionDb</span><span class="p">()</span> <span class="p">(</span><span class="n">ret</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">,</span> <span class="n">usedGas</span> <span class="kt">uint64</span><span class="p">,</span> <span class="n">failed</span> <span class="kt">bool</span><span class="p">,</span> <span class="n">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">=</span> <span class="n">st</span><span class="o">.</span><span class="n">preCheck</span><span class="p">();</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span>
    <span class="p">}</span>
    <span class="n">msg</span> <span class="o">:=</span> <span class="n">st</span><span class="o">.</span><span class="n">msg</span>
    <span class="n">sender</span> <span class="o">:=</span> <span class="n">vm</span><span class="o">.</span><span class="n">AccountRef</span><span class="p">(</span><span class="n">msg</span><span class="o">.</span><span class="n">From</span><span class="p">())</span>
    <span class="n">homestead</span> <span class="o">:=</span> <span class="n">st</span><span class="o">.</span><span class="n">evm</span><span class="o">.</span><span class="n">ChainConfig</span><span class="p">()</span><span class="o">.</span><span class="n">IsHomestead</span><span class="p">(</span><span class="n">st</span><span class="o">.</span><span class="n">evm</span><span class="o">.</span><span class="n">BlockNumber</span><span class="p">)</span>
    <span class="n">contractCreation</span> <span class="o">:=</span> <span class="n">msg</span><span class="o">.</span><span class="n">To</span><span class="p">()</span> <span class="o">==</span> <span class="no">nil</span>

    <span class="c">// Pay intrinsic gas</span>
    <span class="n">gas</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">IntrinsicGas</span><span class="p">(</span><span class="n">st</span><span class="o">.</span><span class="n">data</span><span class="p">,</span> <span class="n">contractCreation</span><span class="p">,</span> <span class="n">homestead</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="no">false</span><span class="p">,</span> <span class="n">err</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">=</span> <span class="n">st</span><span class="o">.</span><span class="n">useGas</span><span class="p">(</span><span class="n">gas</span><span class="p">);</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="no">false</span><span class="p">,</span> <span class="n">err</span>
    <span class="p">}</span>

    <span class="k">var</span> <span class="p">(</span>
        <span class="n">evm</span> <span class="o">=</span> <span class="n">st</span><span class="o">.</span><span class="n">evm</span>
        <span class="c">// vm errors do not effect consensus and are therefor</span>
        <span class="c">// not assigned to err, except for insufficient balance</span>
        <span class="c">// error.</span>
        <span class="n">vmerr</span> <span class="kt">error</span>
    <span class="p">)</span>
    <span class="k">if</span> <span class="n">contractCreation</span> <span class="p">{</span>
        <span class="n">ret</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">st</span><span class="o">.</span><span class="n">gas</span><span class="p">,</span> <span class="n">vmerr</span> <span class="o">=</span> <span class="n">evm</span><span class="o">.</span><span class="n">Create</span><span class="p">(</span><span class="n">sender</span><span class="p">,</span> <span class="n">st</span><span class="o">.</span><span class="n">data</span><span class="p">,</span> <span class="n">st</span><span class="o">.</span><span class="n">gas</span><span class="p">,</span> <span class="n">st</span><span class="o">.</span><span class="n">value</span><span class="p">)</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="c">// Increment the nonce for the next transaction</span>
        <span class="n">st</span><span class="o">.</span><span class="n">state</span><span class="o">.</span><span class="n">SetNonce</span><span class="p">(</span><span class="n">msg</span><span class="o">.</span><span class="n">From</span><span class="p">(),</span> <span class="n">st</span><span class="o">.</span><span class="n">state</span><span class="o">.</span><span class="n">GetNonce</span><span class="p">(</span><span class="n">sender</span><span class="o">.</span><span class="n">Address</span><span class="p">())</span><span class="o">+</span><span class="m">1</span><span class="p">)</span>
        <span class="n">ret</span><span class="p">,</span> <span class="n">st</span><span class="o">.</span><span class="n">gas</span><span class="p">,</span> <span class="n">vmerr</span> <span class="o">=</span> <span class="n">evm</span><span class="o">.</span><span class="n">Call</span><span class="p">(</span><span class="n">sender</span><span class="p">,</span> <span class="n">st</span><span class="o">.</span><span class="n">to</span><span class="p">(),</span> <span class="n">st</span><span class="o">.</span><span class="n">data</span><span class="p">,</span> <span class="n">st</span><span class="o">.</span><span class="n">gas</span><span class="p">,</span> <span class="n">st</span><span class="o">.</span><span class="n">value</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="n">vmerr</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="n">log</span><span class="o">.</span><span class="n">Debug</span><span class="p">(</span><span class="s">"VM returned with error"</span><span class="p">,</span> <span class="s">"err"</span><span class="p">,</span> <span class="n">vmerr</span><span class="p">)</span>
        <span class="c">// The only possible consensus-error would be if there wasn't</span>
        <span class="c">// sufficient balance to make the transfer happen. The first</span>
        <span class="c">// balance transfer may never fail.</span>
        <span class="k">if</span> <span class="n">vmerr</span> <span class="o">==</span> <span class="n">vm</span><span class="o">.</span><span class="n">ErrInsufficientBalance</span> <span class="p">{</span>
            <span class="k">return</span> <span class="no">nil</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="no">false</span><span class="p">,</span> <span class="n">vmerr</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="n">st</span><span class="o">.</span><span class="n">refundGas</span><span class="p">()</span>
    <span class="n">st</span><span class="o">.</span><span class="n">state</span><span class="o">.</span><span class="n">AddBalance</span><span class="p">(</span><span class="n">st</span><span class="o">.</span><span class="n">evm</span><span class="o">.</span><span class="n">Coinbase</span><span class="p">,</span> <span class="nb">new</span><span class="p">(</span><span class="n">big</span><span class="o">.</span><span class="n">Int</span><span class="p">)</span><span class="o">.</span><span class="n">Mul</span><span class="p">(</span><span class="nb">new</span><span class="p">(</span><span class="n">big</span><span class="o">.</span><span class="n">Int</span><span class="p">)</span><span class="o">.</span><span class="n">SetUint64</span><span class="p">(</span><span class="n">st</span><span class="o">.</span><span class="n">gasUsed</span><span class="p">()),</span> <span class="n">st</span><span class="o">.</span><span class="n">gasPrice</span><span class="p">))</span>

    <span class="k">return</span> <span class="n">ret</span><span class="p">,</span> <span class="n">st</span><span class="o">.</span><span class="n">gasUsed</span><span class="p">(),</span> <span class="n">vmerr</span> <span class="o">!=</span> <span class="no">nil</span><span class="p">,</span> <span class="n">err</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>preCheck 中会 buyGas，这里会将 limit × price 的 gas 先扣除掉。</p>

<p>后面处理过程中，会计算真实的 gas 消耗：</p>

<ul>
  <li>IntrinsicGas，是固定消耗，包含基础的转账消耗（或者是创建合约消耗），和 data 数据大小对应的 gas 消耗。</li>
  <li>调用智能合约的消耗</li>
</ul>

<p>然后剩余的 gas 会在 refundGas 中归还，最后计算挖矿奖励。</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="rouge-code"><pre><span class="n">unc</span> <span class="p">(</span><span class="n">st</span> <span class="o">*</span><span class="n">StateTransition</span><span class="p">)</span> <span class="n">preCheck</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="c">// Make sure this transaction's nonce is correct.</span>
    <span class="k">if</span> <span class="n">st</span><span class="o">.</span><span class="n">msg</span><span class="o">.</span><span class="n">CheckNonce</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">nonce</span> <span class="o">:=</span> <span class="n">st</span><span class="o">.</span><span class="n">state</span><span class="o">.</span><span class="n">GetNonce</span><span class="p">(</span><span class="n">st</span><span class="o">.</span><span class="n">msg</span><span class="o">.</span><span class="n">From</span><span class="p">())</span>
        <span class="k">if</span> <span class="n">nonce</span> <span class="o">&lt;</span> <span class="n">st</span><span class="o">.</span><span class="n">msg</span><span class="o">.</span><span class="n">Nonce</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">ErrNonceTooHigh</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="n">nonce</span> <span class="o">&gt;</span> <span class="n">st</span><span class="o">.</span><span class="n">msg</span><span class="o">.</span><span class="n">Nonce</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">ErrNonceTooLow</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">st</span><span class="o">.</span><span class="n">buyGas</span><span class="p">()</span>
<span class="p">}</span>

<span class="k">func</span> <span class="p">(</span><span class="n">st</span> <span class="o">*</span><span class="n">StateTransition</span><span class="p">)</span> <span class="n">buyGas</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
    <span class="n">mgval</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="n">big</span><span class="o">.</span><span class="n">Int</span><span class="p">)</span><span class="o">.</span><span class="n">Mul</span><span class="p">(</span><span class="nb">new</span><span class="p">(</span><span class="n">big</span><span class="o">.</span><span class="n">Int</span><span class="p">)</span><span class="o">.</span><span class="n">SetUint64</span><span class="p">(</span><span class="n">st</span><span class="o">.</span><span class="n">msg</span><span class="o">.</span><span class="n">Gas</span><span class="p">()),</span> <span class="n">st</span><span class="o">.</span><span class="n">gasPrice</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">st</span><span class="o">.</span><span class="n">state</span><span class="o">.</span><span class="n">GetBalance</span><span class="p">(</span><span class="n">st</span><span class="o">.</span><span class="n">msg</span><span class="o">.</span><span class="n">From</span><span class="p">())</span><span class="o">.</span><span class="n">Cmp</span><span class="p">(</span><span class="n">mgval</span><span class="p">)</span> <span class="o">&lt;</span> <span class="m">0</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">errInsufficientBalanceForGas</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">st</span><span class="o">.</span><span class="n">gp</span><span class="o">.</span><span class="n">SubGas</span><span class="p">(</span><span class="n">st</span><span class="o">.</span><span class="n">msg</span><span class="o">.</span><span class="n">Gas</span><span class="p">());</span> <span class="n">err</span> <span class="o">!=</span> <span class="no">nil</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">err</span>
    <span class="p">}</span>
    <span class="n">st</span><span class="o">.</span><span class="n">gas</span> <span class="o">+=</span> <span class="n">st</span><span class="o">.</span><span class="n">msg</span><span class="o">.</span><span class="n">Gas</span><span class="p">()</span>

    <span class="n">st</span><span class="o">.</span><span class="n">initialGas</span> <span class="o">=</span> <span class="n">st</span><span class="o">.</span><span class="n">msg</span><span class="o">.</span><span class="n">Gas</span><span class="p">()</span>
    <span class="n">st</span><span class="o">.</span><span class="n">state</span><span class="o">.</span><span class="n">SubBalance</span><span class="p">(</span><span class="n">st</span><span class="o">.</span><span class="n">msg</span><span class="o">.</span><span class="n">From</span><span class="p">(),</span> <span class="n">mgval</span><span class="p">)</span>
    <span class="k">return</span> <span class="no">nil</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<script type="text/javascript" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script>

:ET